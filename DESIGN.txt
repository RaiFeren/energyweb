==========
Design of energyweb -- The Energy Monitoring System for Harvey Mudd College
==========

Authors of Program:
------------------

    Chandler May, HMC '11 - cjmay4754@gmail.com

    Beryl Egerter, HMC '13 - beryl_egerter@hmc.edu
    Rai Feren, HMC '13 - rai_feren@hmc.edu

==========

Purpose:
------
    For monitoring the energy usage of the various buildings on Harvey
    Mudd College. This system creates a website on which users can
    view a graph that displays the readings from the energy
    monitors. Graphs can be either updating in real time but
    constrained time periods, or user specified static graphs.

==========

How to Run:
---------
    dev.sh contains useful functions.

    ./dev.sh init 
        Puts the server in a development environment. Will create a
        database with "development-friendly data"
    ./dev.sh start
        Starts all monitors
    ./dev.sh stop
        Stops all monitors
    ./dev.sh restart
        Restarts all monitors

    If the monitors stop working, do hard resets, then ssh in and
    ./dev restart

    manage.py is for interacting with the Django framework. As you
    might notice by looking at dev.sh, dev.sh simply calls manage.py
    with various arguments. Look up Django to see how manage.py
    works...

==========

Structure:
-------

    Files:        
    -----
        .gitignore - Lists the regexps for file names to ignore when
            committing to git.

        DESIGN.txt - You're reading it right now.
        LICENSE.txt - Code License
        README.rst - Readme file. Format is such that git can parse it.

        copy_to_django.sql - Apparently exists to transition from an
            older version of energyweb to the Django database. Unsure
            if it still has any purposeful functionality.
        dev.sh - Script for managing the server. Able to start, stop,
            and restart the monitors. Also can boot into testing mode.
        initial_data.json - Associates Dorms with colors, as well as
            identifying which sensors are with which dorms, what IP
            addresses each sensor has, and what the multiplicative
            factor is.

        The following files are created by Django

        __init__.py - Must remain empty. Tells Python that directory
            should be considered a Python package. 
        manage.py - Command-line utility for interacting with the
            project.
        settings.py - Settings/configurations for the project. 
        urls.py - URL declarations for the project.


        graph/ - Contains files for accessing the databases for
            building the graphs.


            __init__.py - Must remain empty. Declares directory as a
                Python package.
            admin.py - Manages Administration part of the
                database. Allows editing from within Django.
            context_processors.py
            daemon.py
            fake_rhizome_profiles.py - Contains dummied data for
                testing. Resembles data from an Energy Monitor.
            models.py - Defines database layout
            tests.py - Holds tests for use by manage.py in the root
                folder. Is effectively ignorable, just created
                by Django.
            urls.py - Contains regular expressions for parsing URLS
                such that they can access the database
                appropriately. 
            views.py - Contains information on creating the webpages


            management/ - Empty package besides its contained
                commands...

            management/commands/
                __init__.py - Declares directory as python package
                create_power_averages.py - Inserts missing power
                    averages for all sensors, based on sensor readings
                    already in the database
                develdb.py - Set up the environment for development
                    testing. Changes sensor settings to energyfaker's
                    settings rather than real settings
                energyfaker.py - Imitates the Energy Monitoring
                    devices so that the system can be tested without
                    using the real monitors.
                energymon.py - Connects to the energy monitoring
                    devices. 


        static/ - Contains files for creating displays of graphs

            dynamic_graph.js - Reads data from the database and posts
                it to the website for the dynamic graph
            loading.gif - The animation for the loading bar
            mon_status.js - Reads data from the database and posts it
                to the website for the table of statistics beneath the
                dynamic graph
            screen.css - Contains styles for the entire site
            static_graph.js - Draws the "custom graph"
            static_graph_form.js - Gets data from the website for
                drawing the graph

            flot/ - Javascript plotting library for jQuery
                
            jquery-ui/ - 


        templates/ - Contains html pages to be used as
            templates. Pages are marked using template formatting.

            404.html - Displays when an invalid URL is entered
            500.html - Default error page
            base.html - Template for entire website. Page specific
                information is entered in the {} areas

            graph/ - Contains contents for filling in the templates
                data_interface.html - Contents for the Custom Graph,
                    specifically the page where it queries the user
                    about what time frame they'd like to examine.
                dynamic_graph.html - Contents for the Home
                    Graph. Creates an empty div to be filled in via
                    Javascript, and then creates the table of energy
                    statistics 
                mon_status.html - Creates the table for reporting
                    statistics on how long it takes for the system to
                    receive data from sensors.
                static_graph.html - Creates an empty div for
                    Javascript to fill in for the Custom Graph.
                static_graph_form.html - Creates the user input form
                    for the custom graph. This is for specifying the
                    time frame to look at.


    Data Structures: 
    ---------------
        Most important data is stored in a SQL database. 

    Important Algorithms:
    ---------------------

==========

Limitations: 
---------
    Django requires a pre-Python 3.x installation
    Devices send data every 10 seconds, thus all computation must be
        faster than 10 seconds.
    Devices can not accept more than one connection at a time.
    When downloading the data, json format is not human readable
    There is a large amount of data, such that backing it up takes 30
        minutes, which is unacceptable given the device limitation
        earlier. 
    Data is currently only stored on the server itself.
    System is unable to recognize when a sensor is down.

==========

Possible Improvements:
------------------
    Watch the data coming in and figure out if a sensor has gone
        crazy/offline then send notification in some way.
    Re-design the website with all features in mind to create a
        efficient user experience 
    Update some of the software packages used (e.g. Python 2.6 change
        to Python 2.7) 
    Automate data backup
    Make the code more modular for expand to more sensors 
    Rework the download script 
    Rework on ways to backup data
