#!/usr/bin/env python


'''
Serve data on a TCP port (using the assumption that the machine can
listen on the specified address and port), imitating a Rhizome Systems 
energy monitoring device.  The imitation is accomplished by reading from
a "profile," i.e., a list of sample readings.  Called with two
arguments:  The sensor ID (as represented in the PostgreSQL DB)
and a command (start, stop, restart).  (The TCP port used will be that
specified in the database for the given sensor.)  Daemonize on 
initialization.
'''


import sys
sys.path.append('/var/local/energy/lib')
import socket, psycopg2, datetime, atexit, signal, time
from daemon import Daemon
from logging import error, info, debug, basicConfig
from fake_rhizome_profiles import FAKE_RHIZOME_PROFILES
from SocketServer import TCPServer, BaseRequestHandler
from random import random, randint
from binascii import unhexlify
from energyconfig import *


class FakeRhizomeHandler(BaseRequestHandler):
    '''
    Subclass of the SocketServer BaseRequestHandler that imitates a
    Rhizome device, as given by FakeRhizomeHandler.profile (assumed 
    to be set before connections are received).
    '''

    def handle(self):
        '''
        Imitate a Rhizome device by sending the data specified in
        self.profile.
        '''
        info('%s:%d connected.' % self.client_address)

        reading_num = 0
        reading = self.profile[reading_num]

        # Loop forever, sending every 10 seconds (roughly)
        while True:
            chars_sent = 0
            # Loop until a full reading (45 bytes) has been sent.
            while chars_sent < 45:
                chars_to_send = randint(1, 45 - chars_sent)
                r = reading[chars_sent:(chars_sent + chars_to_send)]
                self.request.send(r)
                chars_sent += chars_to_send
                debug('Reading %d: data sent.  (%d bytes)' 
                      % (reading_num, chars_to_send))

            reading_num += 1
            if reading_num == len(self.profile):
                reading_num = 0
            reading = self.profile[reading_num]

            time.sleep(10 + (random() - 0.5) * FAKER_SLEEP_VARIATION)

        self.request.close()
        info('%s:%d closed.' % self.client_address)


class FakeRhizomeDaemon(Daemon):
    '''
    Subclass of a daemonizing class.  When initialized, wait for
    a connection on the TCP port specified in the database for the
    given energy monitoring device.  (The particular device is given 
    by the sensor_id argument to run().)  Send imitation data when a
    connection is received.
    '''

    def cleanup(self):
        '''
        Close database and socket connections in preparation for
        termination.
        '''
        info('Cleaning up: rolling back, disconnecting, disconnecting.')
        if not self.conn.closed:
            self.conn.rollback()
            self.conn.close()
        self.s.shutdown()

    def handle_signal(self, signum, frame):
        '''
        If a SIGQUIT, SIGTERM, or SIGINT is received, shutdown cleanly.
        '''
        if signum == signal.SIGQUIT:
            info('Caught SIGQUIT.')
        elif signum == signal.SIGTERM:
            info('Caught SIGTERM.')
        elif signum == signal.SIGINT:
            info('Caught SIGINT.')
        # cleanup() will be called since it is registered with atexit
        sys.exit(0)

    def run(self, sensor_id):
        '''
        Perform the main listen and send loop of the program.
        (See file and class docstrings.)
        '''
        basicConfig(filename=(FAKER_LOG_FILE_TEMPL % sensor_id),
                    format=LOG_FORMAT, datefmt=LOG_DATEFMT, 
                    level=LOG_LEVEL)

        # Register exit and signal behaviors.
        atexit.register(self.cleanup)
        signal.signal(signal.SIGHUP, signal.SIG_IGN)
        signal.signal(signal.SIGINT, self.handle_signal)
        signal.signal(signal.SIGTERM, self.handle_signal)
        signal.signal(signal.SIGQUIT, self.handle_signal)

        # Connect to the PostgreSQL db, then query to collect basic 
        # information about the sensor to be imitated.
        try:
            self.conn = psycopg2.connect(PSQL_CONNSTR)
            cur = self.conn.cursor()
            info('Connected to SQL database.')
        except psycopg2.Error, detail:
            error(str(detail))
            error('Could not connect to SQL database.  Shutting down.')
            sys.exit(1)

        cur.execute('''SELECT sensors.name, sensors.ip, sensors.port, 
                         sensor_groups.name
                       FROM sensors
                       INNER JOIN sensor_groups 
                         ON sensors.sensor_group_id = sensor_groups.id 
                       WHERE sensors.id = %s;''', (sensor_id,))
        (name, ip, port, group_name) = cur.fetchone()
        addr = '%s:%d' % (ip, port)
        if name == '':
            desc = group_name
        else:
            desc = '%s %s' % (group_name, name)
    
        # TODO: is there a better way to give the profile to the 
        # handler?
        FakeRhizomeHandler.profile = [unhexlify(s) for s in 
                                      FAKE_RHIZOME_PROFILES[sensor_id]]
        self.s = TCPServer((ip, port), FakeRhizomeHandler)
        print 'Serving for sensor %d (%s, %s).' % (sensor_id, desc, addr)
        self.s.serve_forever()


if __name__ == '__main__':
    if len(sys.argv) == 3:
        try:
            sensor_id = int(sys.argv[1])
        except ValueError:
            print FAKER_USAGE_TEMPL % sys.argv[0]
            sys.exit(1)

        daemon = FakeRhizomeDaemon(FAKER_PID_FILE_TEMPL % sensor_id, 
                                   args=(sensor_id,), 
                                   stdout=(FAKER_LOG_FILE_TEMPL % sensor_id),
                                   stderr=(FAKER_LOG_FILE_TEMPL % sensor_id))
        if sys.argv[2] == 'start':
            daemon.start()
        elif sys.argv[2] == 'stop':
            daemon.stop()
        elif sys.argv[2] == 'restart':
            daemon.restart()
        else:
            print FAKER_USAGE_TEMPL % sys.argv[0]
            sys.exit(1)
    else:
        print FAKER_USAGE_TEMPL % sys.argv[0]
        sys.exit(1)
