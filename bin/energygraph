#!/usr/bin/python


import psycopg2, time, matplotlib, os, os.path
from energyconfig import *
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


HOURS_LOC = mdates.MinuteLocator(byminute=(0, 30))
HOURS_FMT = mdates.DateFormatter('%l:%M %P')


def main():
    from logging import warning, info, debug, basicConfig
    basicConfig(filename=os.path.join(LOG_DIR, GRAPH_LOG_NAME), 
                format=LOG_FORMAT, datefmt=LOG_DATEFMT, 
                level=LOG_LEVEL)
    conn = psycopg2.connect(PSQL_CONNSTR)
    cur = conn.cursor()
    info('Grapher starting work.')
    last_loop_end = time.time()

    while True:
        fig = plt.figure(figsize=(16,8))
        ax = fig.add_subplot(111)
        for (k, v) in SENSORS.items():
            for d in v:
                q = ('SELECT rdngtime as x, (awatthr + bwatthr' 
                     + (d['cwatthr'] and ' + cwatthr' or '')
                     + ') / 1000 as y FROM ' + d['tb'] + ' WHERE '
                     + 'now() - rdngtime <= interval \'3 hours\' '
                     + 'ORDER BY rdngtime ASC;')
                cur.execute(q)
                x = []
                y = []
                for record in cur:
                    x.append(record[0])
                    y.append(record[1])
                if len(x) > 0:
                    debug(str(x[0]))
                plt.plot_date(x, y, '-', label=d['label'], color=d['color'], 
                              xdate=True, ydate=False)
        ax.xaxis.set_major_locator(HOURS_LOC)
        ax.xaxis.set_major_formatter(HOURS_FMT)
    
        # The following three lines make the plot bigger so the legend
        # doesn't cover up the data.  I got tired of trying to figure
        # out how to get the legend outside the graph but still in the
        # image.
        (ymin, ymax) = plt.ylim()
        ymax *= 7.0/6.0 # Seems to work
        plt.ylim(ymin, ymax)
    
        plt.legend(loc='upper left', ncol=7)
        plt.xlabel('time')
        plt.ylabel('power (kilowatts)')
        plt.title('Energy usage in the last three hours')
        # ax.grid(True)
        # fig.autofmt_xdate() # rotate x-axis labels nicely

        plt.savefig(GRAPH_PATH1, bbox_inches='tight')
        plt.clf()
        plt.close('all')
        os.rename(GRAPH_PATH1, GRAPH_PATH2)

        nap = MAX_SLEEP - (time.time() - last_loop_end)
        if nap > 0:
            time.sleep(nap)
        last_loop_end = time.time()

    cur.close()
    conn.close()


if __name__ == '__main__':
    main()
